@use "reset";

@function rand($min, $max) {
  @return random() * ($max - $min) + $min;
}

$animation-duration: 3s; // 何秒おきにアニメーションをループするか
$glitch-duration: 20%; // グリッチ (RGB ずらし) 自体の長さ、上記秒数に対するパーセンテージ
$glitch-frequency: 10; // 動きの頻度
$glitch-interval: $glitch-duration / $glitch-frequency;

@mixin rgb-shift($name) {
  @keyframes rgb-shift-#{$name} {
    @for $i from 0 to $glitch-frequency {
      #{$i * $glitch-interval} {
        transform: translate(
          #{rand(-2, 2) * 1%},
          // 左右にどれぐらい動くか (横幅の±2%)
          #{rand(-0.5, 0.5) *
            1%}
            // 上下にどれぐらい動くか (縦幅の±0.5%)
        );
      }
    }

    #{$glitch-duration},
    100% {
      transform: none;
    }
  }

  animation: rgb-shift-#{$name} $animation-duration steps(1, jump-end) infinite alternate
    both;
}

@mixin glitch($name) {
  @keyframes glitch-#{$name} {
    @for $i from 0 to $glitch-frequency {
      $left: 0%;
      $right: 100%;
      $top: rand(0, 90) * 1%; // 切り取る位置 (縦軸0%〜90%内でランダムに動かす)
      $bottom: $top + rand(1, 10) * 1%; // 切り取るサイズ (画像縦幅1%〜10%)

      #{$i * $glitch-interval} {
        clip-path: polygon(
          $left $top,
          $right $top,
          $right $bottom,
          $left $bottom
        );
        transform: translate(
          #{rand(-8, 8) * 1%},
          // 左右にどれぐらい動くか (横幅の±8%)
          #{rand(-0.5, 0.5) *
            1%}
            // 上下にどれぐらい動くか (縦幅の±0.5%)
        );
      }
    }

    #{$glitch-duration},
    100% {
      clip-path: none;
      transform: none;
    }
  }

  animation: glitch-#{$name} $animation-duration linear infinite alternate both;
}

.glitch {
  background: #000 no-repeat center;
  background-size: 0; // `.glitch` 自体には背景画像を表示しないようにする
  width: 1000px;
  height: 562px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  overflow: hidden;
  cursor: pointer;

  &::before,
  &::after,
  .channel {
    background: inherit; // コンテナ要素の背景を継承
    background-size: cover;
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  }

  &::before {
    content: "";
  }

  &::after {
    content: "";
  }

  &:hover {
    &:before {
      @include glitch(before);
    }
    &:after {
      @include glitch(after);
    }

    // あとの実装のため上記 `.channel` と分けて記述
    .channel {
      mix-blend-mode: screen; // 各チャンネルをスクリーンで重ねると元の画像に合成することができる

      &::before {
        bottom: 0;
        content: "";
        display: block;
        left: 0;
        mix-blend-mode: multiply; // 画像に R/G/B を乗算で重ねるとそれぞれのチャンネルを作ることができる
        position: absolute;
        right: 0;
        top: 0;
      }
    }

    .r {
      @include rgb-shift(r);
      &::before {
        background: red;
      }
    }

    .g {
      @include rgb-shift(g);
      &::before {
        background: #0f0;
      }
    }

    .b {
      @include rgb-shift(b);
      &::before {
        background: #00f;
      }
    }
  }
}
